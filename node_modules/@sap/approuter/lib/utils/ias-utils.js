'use strict';

const uaaUtils   = require('../utils/uaa-utils');
const urlUtils   = require('../utils/url-utils');
const _          = require('lodash');
const url        = require('url');
const logUtil    = require('./logger');
const vcapUtils  = require('../utils/vcap-utils');
const tracer     = logUtil.getTracer(__filename);

exports.getIasConfig        = getIasConfig;
exports.getIasCredentials   = getIasCredentials;
exports.getTenantComponents = getTenantComponents;

function getIasConfig(req, cb) {
  let iasOptions = req.extIasConfigOptions || req.routerConfig.iasConfig.options;
  if (req.app && req.app.approuter && req.app.approuter.resolveIasConfig) {
    req.app.approuter.resolveIasConfig(req, iasOptions, cb);
  } else {
    resolveIasConfig(req, iasOptions, cb);
  }
}

function resolveIasConfig(req, iasOptions, cb) {
  iasOptions = _.clone(iasOptions);
  let requestHost = urlUtils.getAppRouterHost(req);
  let tenantHostPattern = req.routerConfig.iasConfig.tenantHostPattern;
  if (!tenantHostPattern){
    cb (null,iasOptions);
  } else {
    let tenant = uaaUtils.retrieveTenantFromURL (requestHost, tenantHostPattern);
    if (!tenant || tenant.indexOf('--') < 0){
      return cb('Failed to determine tenant or wrong tenant format, IAS tenants should follow pattern \<zoneId\>--\<IASTenant\>');
    }
    iasOptions.tenant = tenant;
    if (req.destinationCredentials && req.destinationCredentials.ias){
      iasOptions.clientid     = req.destinationCredentials.ias.clientid;
      iasOptions.clientsecret = req.destinationCredentials.ias.clientsecret;
      iasOptions.key           = req.destinationCredentials.ias.key ? req.destinationCredentials.ias.key : null;
      iasOptions.certificate  = req.destinationCredentials.ias.certificate ? req.destinationCredentials.ias.certificate : null;
      iasOptions.domain       = req.destinationCredentials.ias.domain;
      iasOptions.url          = req.destinationCredentials.ias.url;
      return cb(null, tenantIasConfigResolver(iasOptions, requestHost, tenantHostPattern));
    } else {
      cb(null, tenantIasConfigResolver(iasOptions, requestHost, tenantHostPattern));
    }
  }
}

function tenantIasConfigResolver(iasOptions, requestHost, tenantHostPattern) {
  let credentials = vcapUtils.getServiceCredentialsByLabel('subscription-manager');
  if (!credentials){
    credentials = vcapUtils.getServiceCredentialsByLabel('xsuaa');
  }
  let parsedUrl = url.parse(iasOptions.url);
  let providerIasTenant = parsedUrl.hostname.split('.')[0];
  iasOptions.providerTenant = credentials.zoneid + '--' + providerIasTenant;
  let tenantIasHost = parsedUrl.hostname.replace(providerIasTenant,getTenantComponents(iasOptions.tenant).iasTenant);
  iasOptions.url = uaaUtils.toUrlString(parsedUrl, tenantIasHost);
  tracer.debug('Tenant iasUrl: request host "%s", TENANT_HOST_PATTERN: %s, ias url "%s"', requestHost, tenantHostPattern, iasOptions.url);
  return iasOptions;
}

function getIasCredentials(req){
  return req && req.routerConfig && req.routerConfig.iasConfig && req.routerConfig.iasConfig.options.url ? req.routerConfig.iasConfig.options : null;
}

function getTenantComponents(tenant){
  if (!tenant || tenant.indexOf('--') < 0){
    return {
      subdomain: tenant
    };
  }
  let tenantParts = tenant.split('--');
  if (tenantParts.length !== 2){
    throw new Error('Wrong tenant structure, pattern should be: zoneid--iasTenant');
  }
  return {
    zoneId: urlUtils.addUUIDDashes(tenantParts[0]),
    iasTenant: tenantParts[1]
  };
}