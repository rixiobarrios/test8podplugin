'use strict';

var url = require('url');
var uaaUtils = require('../utils/uaa-utils');
var urlUtils = require('../utils/url-utils');
var configUtils = require('../utils/configuration-utils');

module.exports = {
  isPublicPath: function (req) {
    var appConfig = req.routerConfig.appConfig;
    if (appConfig && appConfig.authenticationMethod === 'none' ||
      req.internalUrl && req.internalUrl.route.authenticationType === 'none') {
      return true;
    }

    return module.exports.getRequestPath(req) === appConfig.login.callbackEndpoint;
  },

  isCsrfProtectionEnabled: function (req) {
    return !(req.internalUrl && req.internalUrl.route && req.internalUrl.route.csrfProtection === false);
  },

  isBasicAuthProtectedPath: function (req) {
    return this.pathAuthenticationType(req) === 'basic';
  },

  pathAuthenticationType: function (req) {
    if (req && req.internalUrl && req.internalUrl.route &&
      req.internalUrl.route.authenticationType) {
      return req.internalUrl.route.authenticationType.toLowerCase();
    }

    if (req.extIasConfigOptions){
      return 'ias';
    }

    if (req.extUaaConfigOptions){
      return 'xsuaa';
    }

    if (isBoundToXsuaa(req) && !isBoundToIas(req) && !isIasDestination(req)){
      return 'xsuaa';
    }

    if (isBoundToXsuaa(req) && isIasDestination(req)){
      return 'ias';
    }

    if (!isBoundToXsuaa(req) && isBoundToIas(req) || isIasDestination(req)){
      return 'ias';
    }

    if (isBoundToXsuaa(req) && isBoundToIas(req)){
      return isIASTenant(req) ? 'ias' : 'xsuaa';
    }
    return 'xsuaa';
  },

  getRequestPath: function (req) {
    if (req.internalUrl) {
      return req.internalUrl.pathname;
    }
    return url.parse(req.url).pathname;
  }
};

function isIASTenant(req){
  if (process.env.TENANT_HOST_PATTERN){
    let tenantHostPattern = configUtils.constructRegExp(process.env.TENANT_HOST_PATTERN);
    if (!tenantHostPattern){
      throw new Error('Failed to extract tenant host pattern');
    }
    let requestHost = urlUtils.getAppRouterHost(req);
    let urlTenant = uaaUtils.retrieveTenantFromURL(requestHost, tenantHostPattern);
    return urlTenant && urlTenant.indexOf('--') > -1;
  }
  return false;
}

function isBoundToXsuaa(req){
  return req && req.routerConfig && req.routerConfig.uaaConfig && req.routerConfig.uaaConfig.options && req.routerConfig.uaaConfig.options.url;
}

function isBoundToIas(req){
  return req && req.routerConfig && req.routerConfig.iasConfig && req.routerConfig.iasConfig.options && req.routerConfig.iasConfig.options.url;
}

function isIasDestination(req){
  return req && req.destinationCredentials && req.destinationCredentials.ias;
}